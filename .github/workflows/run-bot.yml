import os
import logging
import requests
from amazon.paapi import AmazonAPI
from telegram import Bot

# --------------------------
# CONFIGURAZIONE LOGGING
# --------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --------------------------
# VARIABILI D'AMBIENTE
# --------------------------
AMAZON_ACCESS_KEY = os.getenv("AMAZON_ACCESS_KEY")
AMAZON_SECRET_KEY = os.getenv("AMAZON_SECRET_KEY")
AMAZON_ASSOCIATE_TAG = os.getenv("AMAZON_ASSOCIATE_TAG")
AMAZON_REGION = os.getenv("AMAZON_REGION", "IT")
AMAZON_COUNTRY = os.getenv("AMAZON_COUNTRY", "it")
BITLY_TOKEN = os.getenv("BITLY_TOKEN")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
KEYWORDS = os.getenv("KEYWORDS", "offerta, sconto, promozione, deal, amazon, tecnologia, elettronica, gadget, casa, cucina, fai da te").split(",")
MIN_SAVE = float(os.getenv("MIN_SAVE", "10"))
ITEM_COUNT = int(os.getenv("ITEM_COUNT", "10"))

# --------------------------
# FUNZIONE BITLY
# --------------------------
def shorten_url(long_url):
    if not BITLY_TOKEN:
        logger.warning("BITLY_TOKEN non impostato, uso URL originale")
        return long_url
    try:
        headers = {
            "Authorization": f"Bearer {BITLY_TOKEN}",
            "Content-Type": "application/json"
        }
        data = {"long_url": long_url}
        resp = requests.post("https://api-ssl.bitly.com/v4/shorten", json=data, headers=headers)
        if resp.status_code == 200:
            return resp.json().get("link", long_url)
        else:
            logger.error(f"Errore Bitly: {resp.text}")
            return long_url
    except Exception as e:
        logger.error(f"Eccezione Bitly: {e}")
        return long_url

# --------------------------
# LOGICA MESSAGGI
# --------------------------
def build_message(title, price, old_price, savings, url):
    if savings >= 50:
        tone = "🔥 SUPER OFFERTA 🔥"
    elif savings >= 30:
        tone = "✨ Offerta imperdibile ✨"
    elif savings >= 15:
        tone = "💡 Buon affare 💡"
    else:
        tone = "Offerta disponibile"

    return f"{tone}\n\n📦 {title}\n💰 Prezzo: {price}€ (da {old_price}€)\n💸 Sconto: {savings}%\n🔗 {url}"

# --------------------------
# MAIN BOT
# --------------------------
def main():
    if not all([AMAZON_ACCESS_KEY, AMAZON_SECRET_KEY, AMAZON_ASSOCIATE_TAG, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID]):
        logger.error("⚠️ Variabili d'ambiente mancanti!")
        return

    amazon = AmazonAPI(AMAZON_ACCESS_KEY, AMAZON_SECRET_KEY, AMAZON_ASSOCIATE_TAG, AMAZON_COUNTRY)
    bot = Bot(token=TELEGRAM_BOT_TOKEN)

    for keyword in KEYWORDS:
        logger.info(f"Cerco offerte per: {keyword.strip()}")
        try:
            products = amazon.search_items(keywords=keyword.strip(), item_count=ITEM_COUNT)
            for p in products:
                try:
                    title = p.title
                    price = float(p.offers.listings[0].price.amount)
                    old_price = float(p.offers.listings[0].price.savings.amount + price)
                    savings = round(p.offers.listings[0].price.savings.percentage, 2)

                    if savings >= MIN_SAVE:
                        short_url = shorten_url(p.detail_page_url)
                        message = build_message(title, price, old_price, savings, short_url)
                        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
                except Exception as e:
                    logger.error(f"Errore prodotto: {e}")
        except Exception as e:
            logger.error(f"Errore ricerca per '{keyword}': {e}")

if __name__ == "__main__":
    main()
